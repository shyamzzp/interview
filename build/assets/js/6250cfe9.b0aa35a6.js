"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[8194],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=s(n),d=r,g=c["".concat(l,".").concat(d)]||c[d]||u[d]||i;return n?a.createElement(g,o(o({ref:t},m),{},{components:n})):a.createElement(g,o({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:r,o[1]=p;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9089:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={tree_title:"Map",description:"This will cover the most of the topics that will be part of the Map.",last_modified:new Date("2022-06-08T15:36:32.363Z")},o="Map",p={unversionedId:"data-structures/map",id:"data-structures/map",title:"Map",description:"This will cover the most of the topics that will be part of the Map.",source:"@site/docs/data-structures/map.md",sourceDirName:"data-structures",slug:"/data-structures/map",permalink:"/interview/docs/data-structures/map",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Map",description:"This will cover the most of the topics that will be part of the Map.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"Linked List",permalink:"/interview/docs/data-structures/linked-list"},next:{title:"Math",permalink:"/interview/docs/data-structures/math"}},l={},s=[{value:"Types of Map and Complexities",id:"types-of-map-and-complexities",level:2},{value:"Complexities",id:"complexities",level:3},{value:"Operations on Maps",id:"operations-on-maps",level:2},{value:"Insertion Updation",id:"insertion-updation",level:3},{value:"Get Remove",id:"get-remove",level:3},{value:"Iteration",id:"iteration",level:3},{value:"containsKey / containsValue",id:"containskey--containsvalue",level:3},{value:"values / keySet",id:"values--keyset",level:3},{value:"Empty Check / Size",id:"empty-check--size",level:3},{value:"Creating a Frequency Hashmap.",id:"creating-a-frequency-hashmap",level:2},{value:"Sorted Map.",id:"sorted-map",level:2}],m={toc:s};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"map"},"Map"),(0,r.kt)("h2",{id:"types-of-map-and-complexities"},"Types of Map and Complexities"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"// Normal Key-Value mapping.\nMap<String, Integer> map = new HashMap<String, Integer>();\n\n// Maintaining an order of elements inserted into it.\nMap<String, Integer> map = new LinkedHashMap<>();\n\n// The map is sorted according to the natural ordering of its keys,\n// or by a Comparator provided at map creation time, depending on which\n// constructor is used.\nMap<String, Integer> map = new TreeMap<>();\n")),(0,r.kt)("h3",{id:"complexities"},"Complexities"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Map Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Insertion Complexity"),(0,r.kt)("th",{parentName:"tr",align:null},"Lookup Complexity"),(0,r.kt)("th",{parentName:"tr",align:null},"Insertion Order"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"HashMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Any Order")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"LinkedHashMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(1)"),(0,r.kt)("td",{parentName:"tr",align:null},"Insertion Order")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"TreeMap"),(0,r.kt)("td",{parentName:"tr",align:null},"O(logN)"),(0,r.kt)("td",{parentName:"tr",align:null},"O(logN)"),(0,r.kt)("td",{parentName:"tr",align:null},"Sorted ASC")))),(0,r.kt)("h2",{id:"operations-on-maps"},"Operations on Maps"),(0,r.kt)("h3",{id:"insertion-updation"},"Insertion Updation"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'Map<String, Integer> map = new HashMap<String, Integer>();\nmap.put("Student 1", 101);\nmap.put("Student 1", 202);\n\nMap<String, String> map = new HashMap<String, String>(){{\n    put("a", "apple"); put("b", "bear"); put("c", "cat");\n}};\n\n// Time Complexity : O(1)\n')),(0,r.kt)("h3",{id:"get-remove"},"Get Remove"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'Map<String, Integer> map = new HashMap<String, Integer>();\nmap.get("Student 1"); // Returns 202 and NULL if not present.\n\nmap.remove(new String("Student 1"));\n// Return the mapped value if key is present else NULL\n\n// Time Complexity : O(1)\n')),(0,r.kt)("h3",{id:"iteration"},"Iteration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'\nfor(Entry<String, Integer> entry: map.entrySet()) {\n    System.out.print(entry.getKey() + " >> " + entry.getValue());\n}\n\n// Time Complexity : O(n)\n')),(0,r.kt)("h3",{id:"containskey--containsvalue"},"containsKey / containsValue"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'\nMap<String, Integer> map = new HashMap<String, Integer>();\nmap.containsKey("Student 1");\n\nmap.containsValue(202);\n\n// Time Complexity : O(n)\n')),(0,r.kt)("h3",{id:"values--keyset"},"values / keySet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"\nMap<String, Integer> map = new HashMap<String, Integer>();\nCollection<Integer> values= map.values();\nArrayList<Integer> listValues = new ArrayList<>(values);\n\nList ListofKeys = new ArrayList(map.keySet());\n")),(0,r.kt)("h3",{id:"empty-check--size"},"Empty Check / Size"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"\nmap.isEmpty() // Return boolean true if present else false.\nmap.size() // Returns the number of elements(key-value) pairs.\n\n// Time Complexity : O(1)\n")),(0,r.kt)("h2",{id:"creating-a-frequency-hashmap"},"Creating a Frequency Hashmap."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"List<T> list = new ArrayList<>(); // Initial Data.\nHashMap<T,Integer> freq = new HashMap<>();\nfor(T each: list){\n    freq.put(c,freq.getOrDefault(each,0)+1);\n}\n// The above snippet is generic, you can replace T with any\n// valid datatype.\n")),(0,r.kt)("h2",{id:"sorted-map"},"Sorted Map."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"// Comparator is supported only for the TreeMap Constructor.\nMap<Integer, String> treeMap = new TreeMap<Integer, String>(\n    new Comparator<Integer>() {\n        @Override\n        public int compare(Integer o1, Integer o2) {\n            return o2.compareTo(o1);  // Order - DESC // Replace o2 with o1 for ASC.\n        }\n});\ntreeMap.putAll(map);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Complexity for the TreeMap insertion is ",(0,r.kt)("inlineCode",{parentName:"li"},"O(log N)"),"."),(0,r.kt)("li",{parentName:"ul"},"Using a TreeMap with Comparator is still of the same complexity."),(0,r.kt)("li",{parentName:"ul"},"Comparator can be applied only on the TreeMap."),(0,r.kt)("li",{parentName:"ul"},"For sorting mechanism to be used on other types of the Maps, we have extract the list of either the keys or the values for the same.")))}u.isMDXComponent=!0}}]);