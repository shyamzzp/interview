"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[3836],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,f=u["".concat(l,".").concat(d)]||u[d]||p[d]||a;return r?o.createElement(f,s(s({ref:t},m),{},{components:r})):o.createElement(f,s({ref:t},m))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var c=2;c<a;c++)s[c]=r[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2202:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const a={tree_title:"Comparators",description:"This will cover the most of the topics that will be part of the Comparators.",last_modified:new Date("2022-06-08T15:36:32.363Z")},s="Comparators",i={unversionedId:"data-structures/comparators",id:"data-structures/comparators",title:"Comparators",description:"This will cover the most of the topics that will be part of the Comparators.",source:"@site/docs/data-structures/comparators.md",sourceDirName:"data-structures",slug:"/data-structures/comparators",permalink:"/interview/docs/data-structures/comparators",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Comparators",description:"This will cover the most of the topics that will be part of the Comparators.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"Common Problems",permalink:"/interview/docs/data-structures/common-problems"},next:{title:"Complexity",permalink:"/interview/docs/data-structures/complexity"}},l={},c=[{value:"Comparator Class",id:"comparator-class",level:2},{value:"One level of Comparisons",id:"one-level-of-comparisons",level:3},{value:"Two levels of Comparisons.",id:"two-levels-of-comparisons",level:3}],m={toc:c};function p(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"comparators"},"Comparators"),(0,n.kt)("h2",{id:"comparator-class"},"Comparator Class"),(0,n.kt)("h3",{id:"one-level-of-comparisons"},"One level of Comparisons"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Student {\n    int rollno;\n    String name, address;\n}\nclass SortByName implements Comparator<Student> {\n    // Sorting in ascending order of Name.\n    public int compare(Student a, Student b) {\n        return a.name.compareTo(b.name);\n    }\n}\nclass SortByRoll implements Comparator<Student> {\n    // Sorting in ascending order of Roll No.\n    public int compare(Student a, Student b){\n        return a.rollno - b.rollno;\n    }\n}\nclass Solution {\n    public static void main(String[] args) {\n                Collections.sort(studentsArray, new SortByRoll());\n        }\n}\n")),(0,n.kt)("h3",{id:"two-levels-of-comparisons"},"Two levels of Comparisons."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Student {\n    String Name;\n    int Age;\n}\nclass CustomerSortingComparator implements Comparator<Student> {\n    @Override\n    public int compare(Student customer1, Student customer2) {\n    int NameCompare = customer1.Name.compareTo(customer2.Name);\n    int AgeCompare = customer1.Age.compareTo(customer2.Age);\n\n    // 2nd level comparison\n    return (NameCompare == 0) ? AgeCompare : NameCompare;\n    }\n}\nclass Solution {\n    Collections.sort(al,new CustomerSortingComparator());\n}\n")))}p.isMDXComponent=!0}}]);