"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[1443],{7537:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=r(7462),n=(r(7294),r(7373));const a={tree_title:"Graph",description:"This will cover the most of the topics that will be part of the Graph.",last_modified:new Date("2022-06-08T15:36:32.363Z")},s="Graph",c={unversionedId:"data-structures/graph",id:"data-structures/graph",title:"Graph",description:"This will cover the most of the topics that will be part of the Graph.",source:"@site/docs/data-structures/graph.md",sourceDirName:"data-structures",slug:"/data-structures/graph",permalink:"/interview/docs/data-structures/graph",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Graph",description:"This will cover the most of the topics that will be part of the Graph.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"DFS (Depth First Search)",permalink:"/interview/docs/data-structures/dfs"},next:{title:"Linked List",permalink:"/interview/docs/data-structures/linked-list"}},o={},l=[{value:"Detect Cycle in a Directed Graph.",id:"detect-cycle-in-a-directed-graph",level:2}],d={toc:l};function u(e){let{components:t,...r}=e;return(0,n.mdx)("wrapper",(0,i.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)("h1",{id:"graph"},"Graph"),(0,n.mdx)("h2",{id:"detect-cycle-in-a-directed-graph"},"Detect Cycle in a Directed Graph."),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    boolean isCyclicUtil(int i, boolean[] visited, boolean[] recursionStack) {\n            // Mark the current node as visited and\n            // part of recursion stack\n            if (recursionStack[i]) return true;\n            if (visited[i]) return false;\n        \n            visited[i] = true;\n            recursionStack[i] = true;\n        \n            List<Integer> children = adj.get(i);\n            for (Integer c : children){\n                    if (isCyclicUtil(c, visited, recursionStack)){\n                        return true;\n                }\n            recursionStack[i] = false;\n            return false;\n        }\n        boolean isCyclic() {\n            // Mark all the vertices as not visited and\n            // not part of recursion stack\n            boolean[] visited = new boolean[V];\n            boolean[] recursionStack= new boolean[V];\n        \n            // Call the recursive helper function to\n            // detect cycle in different DFS trees\n            for (int i = 0; i < V; i++) if (\n                isCyclicUtil(i, visited, recursionStack)\n            ) return true;\n        \n            return false;\n        }\n}\n")))}u.isMDXComponent=!0},7373:()=>{}}]);