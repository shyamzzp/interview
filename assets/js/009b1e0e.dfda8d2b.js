"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[282],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,h=m["".concat(o,".").concat(u)]||m[u]||d[u]||s;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<s;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1417:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const s={tree_title:"Set",description:"This will cover the most of the topics that will be part of the Set.",last_modified:new Date("2022-06-08T15:36:32.363Z")},i="Set",l={unversionedId:"data-structures/set",id:"data-structures/set",title:"Set",description:"This will cover the most of the topics that will be part of the Set.",source:"@site/docs/data-structures/set.md",sourceDirName:"data-structures",slug:"/data-structures/set",permalink:"/interview/docs/data-structures/set",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Set",description:"This will cover the most of the topics that will be part of the Set.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"Search Algorithms",permalink:"/interview/docs/data-structures/search-algorithms"},next:{title:"Snippets",permalink:"/interview/docs/data-structures/snippets"}},o={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Types of Set",id:"types-of-set",level:2},{value:"HashSet",id:"hashset",level:3},{value:"TreeSet",id:"treeset",level:3},{value:"LinkedHashSet",id:"linkedhashset",level:3},{value:"Operations on Set",id:"operations-on-set",level:2},{value:"Set Theory",id:"set-theory",level:2},{value:"Union of Two Sets",id:"union-of-two-sets",level:3},{value:"Intersection of Two Sets",id:"intersection-of-two-sets",level:3},{value:"Relative Complement (Asymmetric Difference) of Two Sets",id:"relative-complement-asymmetric-difference-of-two-sets",level:3},{value:"References",id:"references",level:2}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"set"},"Set"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("div",{class:"section-container pl0 pr0"},(0,a.kt)("div",{class:"section-item pl0"},(0,a.kt)("p",null,"A Set is a Collection that cannot contain duplicate elements.\nSet also adds a stronger contract on the behavior of the equals and hashCode operations, allowing Set instances to be compared meaningfully even if their implementation types differ.")),(0,a.kt)("div",{class:"section-item"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Set set = new HashSet<Integer>();\n// or var set = new HashSet<Integer>();\nset.add(1);\nset.add(2);\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"types-of-set"},"Types of Set"),(0,a.kt)("div",{class:"section-container pl0 pr0"},(0,a.kt)("div",{class:"section-item pl0"},(0,a.kt)("h3",{id:"hashset"},"HashSet"),(0,a.kt)("p",null,"HashSet, which stores its elements in a hash table, is the best-performing implementation; however it makes no guarantees concerning the order of iteration."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Set<Integer> set = new HashSet<Integer>();\n")),(0,a.kt)("hr",null)),(0,a.kt)("div",{class:"section-item"},(0,a.kt)("h3",{id:"treeset"},"TreeSet"),(0,a.kt)("p",null,"TreeSet, which stores its elements in a red-black tree, orders its elements based on their values; it is substantially slower than HashSet."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Set<Integer> set = new TreeSet<Integer>();\n")),(0,a.kt)("hr",null))),(0,a.kt)("div",{class:"section-container pl0 pr0"},(0,a.kt)("div",{class:"section-item pl0"},(0,a.kt)("h3",{id:"linkedhashset"},"LinkedHashSet"),(0,a.kt)("p",null,"LinkedHashSet, which is implemented as a hash table with a linked list running through it, orders its elements based on the order in which they were inserted into the set (insertion-order)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Set<Integer> set = new LinkedHashSet<Integer>();\n"))),(0,a.kt)("div",{class:"section-item"},(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Order"),(0,a.kt)("th",{parentName:"tr",align:null},"add Time Complexity"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"HashSet"),(0,a.kt)("td",{parentName:"tr",align:null},"No - Order"),(0,a.kt)("td",{parentName:"tr",align:null},"O(1)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"TreeSet"),(0,a.kt)("td",{parentName:"tr",align:null},"Sorted - Order"),(0,a.kt)("td",{parentName:"tr",align:null},"O(log n)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"LinkedHashSet"),(0,a.kt)("td",{parentName:"tr",align:null},"Insertion - Order"),(0,a.kt)("td",{parentName:"tr",align:null},"O(1)")))))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"operations-on-set"},"Operations on Set"),(0,a.kt)("div",{class:"section-container pl0 pr0"},(0,a.kt)("div",{class:"section-item pl0"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Add on Set"',title:'"Add',on:!0,'Set"':!0},"//Manually\nSet<Integer> set = new HashSet<Integer>();\nset.add(1);\nset.add(2);\n\n//From another list\nList<Integer> lists = Arrays.asList(1, 2, 3, 4, 5);\nSet<Integer> set = new HashSet<>();\nset.addAll(lists);\nset.forEach(System.out::print); //12345\n"))),(0,a.kt)("div",{class:"section-item"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Contains on Set"',title:'"Contains',on:!0,'Set"':!0},"Set<Integer> set = new HashSet<Integer>();\nset.add(1);\nset.add(2);\n\nset.contains(1); // true\nset.contains(3); // false\n//TC : O(1)\n\nset1.containsAll(set2);\n//TC : O(n) where n is the size of set2\n")))),(0,a.kt)("div",{class:"section-container pl0 pr0"},(0,a.kt)("div",{class:"section-item pl0"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Remove & Iterator on Set"',title:'"Remove',"&":!0,Iterator:!0,on:!0,'Set"':!0},"Set<Integer> set = new HashSet<Integer>();\nset.add(1);\nset.add(2);\n\nset.remove(element); // Return Type : boolean'\n//TC : O(1)\n------------------------------------------\nIterator value = set.iterator();\nwhile (value.hasNext()) {\n    System.out.println(value.next());\n}\n"))),(0,a.kt)("div",{class:"section-item"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java",metastring:'title="Other operations on Set"',title:'"Other',operations:!0,on:!0,'Set"':!0},"Set<Integer> set = new HashSet<Integer>();\nset.add(1);\n\nset.size(); // Return Type : int\nset.clear(); // Return Type : void\nset.isEmpty(); // Return Type : boolean\nset.iterator(); // Return Type : Iterator\nset.toArray(); // Return Type : Object[]\nset.toArray(new Integer[0]); // Return Type : Integer[]\n\n")))),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"set-theory"},"Set Theory"),(0,a.kt)("div",{class:"section-container pl0 pr0"},(0,a.kt)("div",{class:"section-item pl0"},(0,a.kt)("h3",{id:"union-of-two-sets"},"Union of Two Sets"),(0,a.kt)("p",null,"The term union means combining the values of different sets."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Set<Integer> unionSet = new HashSet<>(setA);\nunionSet.addAll(setB);\n"))),(0,a.kt)("div",{class:"section-item"},(0,a.kt)("h3",{id:"intersection-of-two-sets"},"Intersection of Two Sets"),(0,a.kt)("p",null,"The term intersection means the common values of different sets."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Set<Integer> intersectSet = new HashSet<>(setA);\nintersectSet.retainAll(setB);\n")))),(0,a.kt)("div",{class:"section-container pl0 pr0"},(0,a.kt)("div",{class:"section-item pl0"},(0,a.kt)("h3",{id:"relative-complement-asymmetric-difference-of-two-sets"},"Relative Complement (Asymmetric Difference) of Two Sets"),(0,a.kt)("p",null,"The term relative complement means the values from one set that are not in another. It is also referred to as the set difference."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Relative Complement of setB in setA\nSet<Integer> differenceSet = new HashSet<>(setA);\ndifferenceSet.removeAll(setB);\n\n// Relative Complement of setA in setB\nSet<Integer> differenceSet = new HashSet<>(setB);\ndifferenceSet.removeAll(setA);\n"))),(0,a.kt)("div",{class:"section-item"})),(0,a.kt)("h2",{id:"references"},"References"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://upscfever.com/upsc-fever/en/programming/java/43.html"},"https://upscfever.com/upsc-fever/en/programming/java/43.html")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://simplenotions.wordpress.com/2009/05/13/java-standard-data-structures-big-o-notation/"},"https://simplenotions.wordpress.com/2009/05/13/java-standard-data-structures-big-o-notation/")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.baeldung.com/java-set-operations"},"https://www.baeldung.com/java-set-operations"))))}d.isMDXComponent=!0}}]);