"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[9345],{4581:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>s,default:()=>m,frontMatter:()=>d,metadata:()=>r,toc:()=>o});var i=t(7462),l=(t(7294),t(7373));const d={tree_title:"Linked List",description:"This will cover the most of the topics that will be part of the linked list.",last_modified:new Date("2022-06-08T15:36:32.363Z")},s="Linked List",r={unversionedId:"data-structures/linked-list",id:"data-structures/linked-list",title:"Linked List",description:"This will cover the most of the topics that will be part of the linked list.",source:"@site/docs/data-structures/linked-list.md",sourceDirName:"data-structures",slug:"/data-structures/linked-list",permalink:"/interview/docs/data-structures/linked-list",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Linked List",description:"This will cover the most of the topics that will be part of the linked list.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"Graph",permalink:"/interview/docs/data-structures/graph"},next:{title:"Map",permalink:"/interview/docs/data-structures/map"}},a={},o=[{value:"Node Class",id:"node-class",level:2},{value:"Traversing a Linked List",id:"traversing-a-linked-list",level:2},{value:"Removing First Node of Linked List",id:"removing-first-node-of-linked-list",level:2},{value:"Removing Last Node of Linked List",id:"removing-last-node-of-linked-list",level:2},{value:"Getting End of Linked List",id:"getting-end-of-linked-list",level:2},{value:"Inserting element at the end of the Linked List.",id:"inserting-element-at-the-end-of-the-linked-list",level:2},{value:"Reverse Linked List.",id:"reverse-linked-list",level:2},{value:"Sorting a Linked List using Heap Sort.",id:"sorting-a-linked-list-using-heap-sort",level:2},{value:"Remove Duplicates from Sorted List. Sentinel + Predecessor",id:"remove-duplicates-from-sorted-list-sentinel--predecessor",level:2}],u={toc:o};function m(e){let{components:n,...t}=e;return(0,l.mdx)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.mdx)("h1",{id:"linked-list"},"Linked List"),(0,l.mdx)("div",{class:"section-container"},(0,l.mdx)("div",{class:"section-item pl0"},(0,l.mdx)("h2",{id:"node-class"},"Node Class"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"Class Node{\n    int data;\n    Node next;\n    public Node(int d){\n        data = d;\n        next = null;\n    }\n}\n"))),(0,l.mdx)("div",{class:"section-item"},(0,l.mdx)("h2",{id:"traversing-a-linked-list"},"Traversing a Linked List"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},'public void traverseLinkedList(Node head) {\n    Node temp = head;\n    while (temp != null) {\n        System.out.print(temp.data + " ");\n        temp = temp.next;\n    }\n}\n')))),(0,l.mdx)("hr",null),(0,l.mdx)("div",{class:"section-container pl0 pr0"},(0,l.mdx)("div",{class:"section-item pl0"},(0,l.mdx)("h2",{id:"removing-first-node-of-linked-list"},"Removing First Node of Linked List"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public void removeFirstNodeLinkedList(Node head) {\n    if (head == null) {\n        return;\n    }\n    head = head.next;\n}\n"))),(0,l.mdx)("div",{class:"section-item"},(0,l.mdx)("h2",{id:"removing-last-node-of-linked-list"},"Removing Last Node of Linked List"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public ListNode removeLastNodeLinkedList(Node head) {\n    if (head == null || head.next == null) {\n        return null;\n    }\n    Node temp = head;\n    while (temp.next.next != null) {\n        temp = temp.next;\n    }\n    temp.next = null;\n    return temp;\n}\n")))),(0,l.mdx)("hr",null),(0,l.mdx)("div",{class:"section-container pl0 pr0"},(0,l.mdx)("div",{class:"section-item pl0"},(0,l.mdx)("h2",{id:"getting-end-of-linked-list"},"Getting End of Linked List"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"public void getLastNodeOfLinkedList(Node head) {\n    //edge-case - if head is null\n    if (head == null) {\n        return;\n    }\n    Node temp = head;\n    while (temp.next != null) {\n        temp = temp.next;\n    }\n    System.out.println(temp.data);\n}\n"))),(0,l.mdx)("div",{class:"section-item"},(0,l.mdx)("h2",{id:"inserting-element-at-the-end-of-the-linked-list"},"Inserting element at the end of the Linked List."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode insert(ListNode root, int item)\n    {\n        ListNode temp = new ListNode(item);\n        temp.next = null;\n        if (root == null)\n            root = temp;\n        else {\n            ListNode ptr = root;\n            while (ptr.next != null)\n                ptr = ptr.next;\n            ptr.next = temp;\n        }\n        return root;\n    }\n}\n")))),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"reverse-linked-list"},"Reverse Linked List."),(0,l.mdx)("ul",null,(0,l.mdx)("li",null,"3 Variables : [prev, curr, temp]"),(0,l.mdx)("li",null,"prev will be used to return from the function and the store the current node"),(0,l.mdx)("li",null,"curr will be used to store the current node and will be updated every time to temp."),(0,l.mdx)("li",null,"temp will be used to store the next node and will be updated every time to curr.")),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode curr = head;\n\n        while(curr!=null){\n            ListNode temp = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = temp;\n\n        }\n        return prev;\n    }\n}\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"sorting-a-linked-list-using-heap-sort"},"Sorting a Linked List using Heap Sort."),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"class Solution {\n    public ListNode sortList(ListNode head) {\n        ListNode curr = head;\n        Queue<ListNode> queue = new PriorityQueue<>((n1, n2) -> n1.val - n2.val);\n        while (curr != null) {\n            queue.add(curr);\n            curr = curr.next;\n        }\n\n        ListNode dummy = new ListNode();\n        ListNode prev = dummy;\n        while (!queue.isEmpty()) {\n            curr = queue.poll();\n            curr.next = null;\n            prev.next = curr;\n            prev = curr;\n        }\n        return dummy.next;\n    }\n}\n")),(0,l.mdx)("hr",null),(0,l.mdx)("h2",{id:"remove-duplicates-from-sorted-list-sentinel--predecessor"},"Remove Duplicates from Sorted List. ","[Sentinel + Predecessor]"),(0,l.mdx)("pre",null,(0,l.mdx)("code",{parentName:"pre",className:"language-java"},"class Solution {\n\n    public ListNode deleteDuplicates(ListNode head) {\n    // sentinel\n    ListNode sentinel = new ListNode(0, head);\n\n    // predecessor = the last node\n    // before the sublist of duplicates\n    ListNode pred = sentinel;\n\n    while (head != null) {\n        // if it's a beginning of duplicates sublist\n        // skip all duplicates\n        if (head.next != null && head.val == head.next.val) {\n        // move till the end of duplicates sublist\n        while (head.next != null && head.val == head.next.val) {\n            head = head.next;\n        }\n        // skip all duplicates\n        pred.next = head.next;\n        // otherwise, move predecessor\n        } else {\n        pred = pred.next;\n        }\n\n        // move forward\n        head = head.next;\n    }\n    return sentinel.next;\n    }\n}\n")))}m.isMDXComponent=!0},7373:()=>{}}]);