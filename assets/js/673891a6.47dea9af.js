"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[3836],{2202:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>i,contentTitle:()=>n,default:()=>p,frontMatter:()=>s,metadata:()=>m,toc:()=>l});var r=o(7462),a=(o(7294),o(7373));const s={tree_title:"Comparators",description:"This will cover the most of the topics that will be part of the Comparators.",last_modified:new Date("2022-06-08T15:36:32.363Z")},n="Comparators",m={unversionedId:"data-structures/comparators",id:"data-structures/comparators",title:"Comparators",description:"This will cover the most of the topics that will be part of the Comparators.",source:"@site/docs/data-structures/comparators.md",sourceDirName:"data-structures",slug:"/data-structures/comparators",permalink:"/interview/docs/data-structures/comparators",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Comparators",description:"This will cover the most of the topics that will be part of the Comparators.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"Common Problems",permalink:"/interview/docs/data-structures/common-problems"},next:{title:"Complexity",permalink:"/interview/docs/data-structures/complexity"}},i={},l=[{value:"Comparator Class",id:"comparator-class",level:2},{value:"One level of Comparisons",id:"one-level-of-comparisons",level:3},{value:"Two levels of Comparisons.",id:"two-levels-of-comparisons",level:3}],c={toc:l};function p(e){let{components:t,...o}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"comparators"},"Comparators"),(0,a.mdx)("h2",{id:"comparator-class"},"Comparator Class"),(0,a.mdx)("h3",{id:"one-level-of-comparisons"},"One level of Comparisons"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Student {\n    int rollno;\n    String name, address;\n}\nclass SortByName implements Comparator<Student> {\n    // Sorting in ascending order of Name.\n    public int compare(Student a, Student b) {\n        return a.name.compareTo(b.name);\n    }\n}\nclass SortByRoll implements Comparator<Student> {\n    // Sorting in ascending order of Roll No.\n    public int compare(Student a, Student b){\n        return a.rollno - b.rollno;\n    }\n}\nclass Solution {\n    public static void main(String[] args) {\n                Collections.sort(studentsArray, new SortByRoll());\n        }\n}\n")),(0,a.mdx)("h3",{id:"two-levels-of-comparisons"},"Two levels of Comparisons."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Student {\n    String Name;\n    int Age;\n}\nclass CustomerSortingComparator implements Comparator<Student> {\n    @Override\n    public int compare(Student customer1, Student customer2) {\n    int NameCompare = customer1.Name.compareTo(customer2.Name);\n    int AgeCompare = customer1.Age.compareTo(customer2.Age);\n\n    // 2nd level comparison\n    return (NameCompare == 0) ? AgeCompare : NameCompare;\n    }\n}\nclass Solution {\n    Collections.sort(al,new CustomerSortingComparator());\n}\n")))}p.isMDXComponent=!0},7373:()=>{}}]);