"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[9226],{8310:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var i=t(7462),a=(t(7294),t(7373));const r={tree_title:"Bit Manipulation",description:"This will cover the most of the topics that will be part of the Bit Manipulation.",last_modified:new Date("2022-06-08T15:36:32.363Z")},o="Bit Manipulation",s={unversionedId:"data-structures/bit-manipulation",id:"data-structures/bit-manipulation",title:"Bit Manipulation",description:"This will cover the most of the topics that will be part of the Bit Manipulation.",source:"@site/docs/data-structures/bit-manipulation.md",sourceDirName:"data-structures",slug:"/data-structures/bit-manipulation",permalink:"/interview/docs/data-structures/bit-manipulation",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Bit Manipulation",description:"This will cover the most of the topics that will be part of the Bit Manipulation.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"Arrays",permalink:"/interview/docs/data-structures/arrays"},next:{title:"Common Problems",permalink:"/interview/docs/data-structures/common-problems"}},l={},m=[{value:"XOR Definition",id:"xor-definition",level:2},{value:"Power of Two",id:"power-of-two",level:2},{value:"Single Number",id:"single-number",level:2}],u={toc:m};function p(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"bit-manipulation"},"Bit Manipulation"),(0,a.mdx)("h2",{id:"xor-definition"},"XOR Definition"),(0,a.mdx)("p",null,"A number XOR itself will become 0, any number XOR with 0 will stay unchanged."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public int missingNumber(int[] nums) {\n            int res = nums.length;\n            for(int i=0; i<nums.length; i++){\n                res ^= i;\n                res ^= nums[i];\n            }\n            return res;\n    }\n}\n")),(0,a.mdx)("h2",{id:"power-of-two"},"Power of Two"),(0,a.mdx)("p",null,"Given an integer\xa0",(0,a.mdx)("inlineCode",{parentName:"p"},"n"),", return\xa0",(0,a.mdx)("inlineCode",{parentName:"p"},"true"),"\xa0if it is a power of two. Otherwise, return\xa0",(0,a.mdx)("inlineCode",{parentName:"p"},"false"),".\nAn integer\xa0",(0,a.mdx)("inlineCode",{parentName:"p"},"n"),"\xa0is a power of two, if there exists an integer\xa0",(0,a.mdx)("inlineCode",{parentName:"p"},"x"),"\xa0such that\xa0",(0,a.mdx)("inlineCode",{parentName:"p"},"n == 2^x"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public boolean isPowerOfTwo(int n) {\n        return n>0 && (n&(n-1)) == 0;\n    }\n}\n")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public boolean isPowerOfTwo(int n) {\n        return n>0 && Integer.bitCount(n) == 1;\n    }\n}\n")),(0,a.mdx)("h2",{id:"single-number"},"Single Number"),(0,a.mdx)("p",null,"Given an integer array\xa0",(0,a.mdx)("inlineCode",{parentName:"p"},"nums"),"\xa0where\xa0every element appears\xa0",(0,a.mdx)("strong",{parentName:"p"},"three times"),"\xa0except for one,\nwhich appears\xa0",(0,a.mdx)("strong",{parentName:"p"},"exactly once"),".\xa0Find the single element and return it.\nYou must\xa0implement a solution with a linear runtime complexity and use\xa0only constant\xa0extra space."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public int singleNumber(int[] arr) {\n        int ones = 0;\n        int twos = 0;\n        for (int value : arr) {\n            ones = (ones ^ value) & ~twos;\n            twos = (twos ^ value) & ~ones;\n        }\n        return ones;\n    }\n}\n")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"// This problem can be translated to:\n//      For every bit position, we cancel any 3-time 1 and 3-time 0 to a 0\n//      Then we need to find equations that fits this: (assume we apply 3 1s)\n//               Zero 1      First 1     Second 1    Third 1\n// ones            0            1           0           0\n// twos            0            0           1           0\n")))}p.isMDXComponent=!0},7373:()=>{}}]);