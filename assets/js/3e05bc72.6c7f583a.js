"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[9430],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function u(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),l=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):u(u({},t),e)),a},c=function(e){var t=l(e.components);return r.createElement(o.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,o=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(a),m=n,y=d["".concat(o,".").concat(m)]||d[m]||p[m]||s;return a?r.createElement(y,u(u({ref:t},c),{},{components:a})):r.createElement(y,u({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,u=new Array(s);u[0]=d;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:n,u[1]=i;for(var l=2;l<s;l++)u[l]=a[l];return r.createElement.apply(null,u)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3190:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>u,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=a(7462),n=(a(7294),a(3905));const s={tree_title:"Leetcode Data Structure \ud83d\udea7",description:"This will cover up the problems/questions from the Leetcode 75 - Study Plan.",last_modified:new Date("2022-06-22T12:03:49.349Z")},u="Leetcode Data Structure \ud83d\udea7",i={unversionedId:"questions/studyplan-datastructure",id:"questions/studyplan-datastructure",title:"Leetcode Data Structure \ud83d\udea7",description:"This will cover up the problems/questions from the Leetcode 75 - Study Plan.",source:"@site/docs/questions/studyplan-datastructure.md",sourceDirName:"questions",slug:"/questions/studyplan-datastructure",permalink:"/interview/docs/questions/studyplan-datastructure",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Leetcode Data Structure \ud83d\udea7",description:"This will cover up the problems/questions from the Leetcode 75 - Study Plan.",last_modified:"2022-06-22T12:03:49.349Z"},sidebar:"docs",previous:{title:"Leetcode-Medium \ud83d\udea7",permalink:"/interview/docs/questions/leetcode-medium"},next:{title:"Leetcode 75 \ud83d\udea7",permalink:"/interview/docs/questions/studyplan-leetcode75"}},o={},l=[{value:"Top coding questions from Data Structure Study Plan",id:"top-coding-questions-from-data-structure-study-plan",level:2},{value:"Day 1.1 Contains Duplicate",id:"day-11-contains-duplicate",level:3},{value:"Day 1.2 Maximum Sub-array",id:"day-12-maximum-sub-array",level:3},{value:"References",id:"references",level:2}],c={toc:l};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"leetcode-data-structure-"},"Leetcode Data Structure \ud83d\udea7"),(0,n.kt)("h2",{id:"top-coding-questions-from-data-structure-study-plan"},"Top coding questions from Data Structure Study Plan"),(0,n.kt)("div",{class:"datastructure-container"},(0,n.kt)("div",{class:"datastructure-item pl0"},(0,n.kt)("h3",{id:"day-11-contains-duplicate"},"Day 1.1 Contains Duplicate"),(0,n.kt)("p",null,"Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLine Numbers",showLine:!0,Numbers:!0},"class Solution {\n    public boolean containsDuplicate(int[] nums) {\n    }\n}\n")),(0,n.kt)("p",null,"Input: nums = ","[1,2,3,1]"," Output: true"),(0,n.kt)("span",{class:"tag-is-success"},"Array"),(0,n.kt)("span",{class:"tag-is-success"},"Hash-Table"),(0,n.kt)("span",{class:"tag-is-success"},"Sorting")),(0,n.kt)("div",{class:"datastructure-item"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"This is an easy problem and can be done using Set or Hash-Table, ofc using extra space. The problem can also be solved using Sorting but the complexity will be O(nlogn), which is higher than O(n), but the space will be O(1).\n\nTC : O(nlogn) SC : O(1) Through Sorting.\nTC : O(n) SC : O(n) Through Hash-Table/Hash-Set.\n\n")))),(0,n.kt)("hr",null),(0,n.kt)("div",{class:"datastructure-container"},(0,n.kt)("div",{class:"datastructure-item pl0"},(0,n.kt)("h3",{id:"day-12-maximum-sub-array"},"Day 1.2 Maximum Sub-array"),(0,n.kt)("p",null,"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\nA subarray is a contiguous part of an array."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public int maxSubArray(int[] nums) {\n    }\n}\n")),(0,n.kt)("p",null,"Input: nums = ","[-2,1,-3,4,-1,2,1,-5,4]"," Output: 6\nExplanation: ","[4,-1,2,1]"," has the largest sum = 6."),(0,n.kt)("span",{class:"tag-is-success"},"Prefix Sum")),(0,n.kt)("div",{class:"datastructure-item"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"The idea is simple around the problem to take two variable globalMax and currentMax. The globalMax is the max sum of the whole array. The currentMax is the max sum of the subarray till now. \n\nThe currentMax will be updated by adding the current element to the currentMax, if the currentMax>0. If the currentMax is negative, then the currentMax=nums[i]. The globalMax will be updated by comparing the globalMax and currentMax.\n")))),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("ul",null,(0,n.kt)("li",null,(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://leetcode.com/study-plan/data-structure/"},"https://leetcode.com/study-plan/data-structure/")))))}p.isMDXComponent=!0}}]);