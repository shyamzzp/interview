"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[9226],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(n),d=i,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8310:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={tree_title:"Bit Manipulation",description:"This will cover the most of the topics that will be part of the Bit Manipulation.",last_modified:new Date("2022-06-08T15:36:32.363Z")},o="Bit Manipulation",s={unversionedId:"data-structures/bit-manipulation",id:"data-structures/bit-manipulation",title:"Bit Manipulation",description:"This will cover the most of the topics that will be part of the Bit Manipulation.",source:"@site/docs/data-structures/bit-manipulation.md",sourceDirName:"data-structures",slug:"/data-structures/bit-manipulation",permalink:"/interview/docs/data-structures/bit-manipulation",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Bit Manipulation",description:"This will cover the most of the topics that will be part of the Bit Manipulation.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"Arrays",permalink:"/interview/docs/data-structures/arrays"},next:{title:"Bitwise Operations",permalink:"/interview/docs/data-structures/bitwise-operations"}},l={},u=[{value:"XOR Definition",id:"xor-definition",level:2},{value:"Power of Two",id:"power-of-two",level:2},{value:"Single Number",id:"single-number",level:2}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bit-manipulation"},"Bit Manipulation"),(0,i.kt)("h2",{id:"xor-definition"},"XOR Definition"),(0,i.kt)("p",null,"A number XOR itself will become 0, any number XOR with 0 will stay unchanged."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public int missingNumber(int[] nums) {\n            int res = nums.length;\n            for(int i=0; i<nums.length; i++){\n                res ^= i;\n                res ^= nums[i];\n            }\n            return res;\n    }\n}\n")),(0,i.kt)("h2",{id:"power-of-two"},"Power of Two"),(0,i.kt)("p",null,"Given an integer\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"n"),", return\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"true"),"\xa0if it is a power of two. Otherwise, return\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"false"),".\nAn integer\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"n"),"\xa0is a power of two, if there exists an integer\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"x"),"\xa0such that\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"n == 2^x"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public boolean isPowerOfTwo(int n) {\n        return n>0 && (n&(n-1)) == 0;\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public boolean isPowerOfTwo(int n) {\n        return n>0 && Integer.bitCount(n) == 1;\n    }\n}\n")),(0,i.kt)("h2",{id:"single-number"},"Single Number"),(0,i.kt)("p",null,"Given an integer array\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"nums"),"\xa0where\xa0every element appears\xa0",(0,i.kt)("strong",{parentName:"p"},"three times"),"\xa0except for one,\nwhich appears\xa0",(0,i.kt)("strong",{parentName:"p"},"exactly once"),".\xa0Find the single element and return it.\nYou must\xa0implement a solution with a linear runtime complexity and use\xa0only constant\xa0extra space."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public int singleNumber(int[] arr) {\n        int ones = 0;\n        int twos = 0;\n        for (int value : arr) {\n            ones = (ones ^ value) & ~twos;\n            twos = (twos ^ value) & ~ones;\n        }\n        return ones;\n    }\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"// This problem can be translated to:\n//      For every bit position, we cancel any 3-time 1 and 3-time 0 to a 0\n//      Then we need to find equations that fits this: (assume we apply 3 1s)\n//               Zero 1      First 1     Second 1    Third 1\n// ones            0            1           0           0\n// twos            0            0           1           0\n")))}c.isMDXComponent=!0}}]);