"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[8248],{1461:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var n=t(7462),a=(t(7294),t(7373));const i={tree_title:"Tree",description:"This will cover the most of the topics that will be part of the tree.",last_modified:new Date("2022-06-08T15:36:32.363Z")},o="Tree",s={unversionedId:"data-structures/tree",id:"data-structures/tree",title:"Tree",description:"This will cover the most of the topics that will be part of the tree.",source:"@site/docs/data-structures/tree.md",sourceDirName:"data-structures",slug:"/data-structures/tree",permalink:"/interview/docs/data-structures/tree",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Tree",description:"This will cover the most of the topics that will be part of the tree.",last_modified:"2022-06-08T15:36:32.363Z"},sidebar:"docs",previous:{title:"Sorting Algorithms",permalink:"/interview/docs/data-structures/sorting-algorithms"},next:{title:"Trie",permalink:"/interview/docs/data-structures/trie"}},l={},d=[{value:"Tree Traversal - Inorder, Preorder and Postorder",id:"tree-traversal---inorder-preorder-and-postorder",level:2},{value:"Pre-order Traversal",id:"pre-order-traversal",level:3},{value:"In-order Traversal",id:"in-order-traversal",level:3},{value:"Post-order Traversal",id:"post-order-traversal",level:3},{value:"Level Order Traversal of Binary Tree",id:"level-order-traversal-of-binary-tree",level:2},{value:"Implementation using DFS",id:"implementation-using-dfs",level:3},{value:"Implementation using BFS",id:"implementation-using-bfs",level:3},{value:"Height (Maximum Depth) of a Tree",id:"height-maximum-depth-of-a-tree",level:2},{value:"Minimum Depth of a Tree",id:"minimum-depth-of-a-tree",level:2},{value:"Deepest Leaves",id:"deepest-leaves",level:2},{value:"Binary Tree Paths",id:"binary-tree-paths",level:2},{value:"Binary Search Tree Paths",id:"binary-search-tree-paths",level:2},{value:"Resources",id:"resources",level:2}],u={toc:d};function m(e){let{components:r,...t}=e;return(0,a.mdx)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,a.mdx)("h1",{id:"tree"},"Tree"),(0,a.mdx)("h2",{id:"tree-traversal---inorder-preorder-and-postorder"},"Tree Traversal - Inorder, Preorder and Postorder"),(0,a.mdx)("div",{class:"section-container pl0 pr0"},(0,a.mdx)("div",{class:"section-item pl0"},(0,a.mdx)("h3",{id:"pre-order-traversal"},"Pre-order Traversal"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    void preorder(Node node) {\n        if (node == null) return;\n        // Traverse root\n        System.out.print(node.item + "->");\n        // Traverse left\n        preorder(node.left);\n        // Traverse right\n        preorder(node.right);\n    }\n}\n'))),(0,a.mdx)("div",{class:"section-item"},(0,a.mdx)("h3",{id:"in-order-traversal"},"In-order Traversal"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java"},'class Solution {\n    void inorder(Node node) {\n        if (node == null) return;\n        // Traverse left\n        inorder(node.left);\n        // Traverse root\n        System.out.print(node.item + "->");\n        // Traverse right\n        inorder(node.right);\n    }\n}\n')))),(0,a.mdx)("h3",{id:"post-order-traversal"},"Post-order Traversal"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'class Solution {\n    void postorder(Node node) {\n        if (node == null) return;\n        // Traverse left\n        postorder(node.left);\n        // Traverse right\n        postorder(node.right);\n        // Traverse root\n        System.out.print(node.item + "->");\n    }\n}\n')),(0,a.mdx)("h2",{id:"level-order-traversal-of-binary-tree"},"Level Order Traversal of Binary Tree"),(0,a.mdx)("h3",{id:"implementation-using-dfs"},"Implementation using DFS"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n    List<List<Integer>> res = new ArrayList<List<Integer>>();\n    levelHelper(res, root, 0);\n    return res;\n    }\n\n    public void levelHelper(List<List<Integer>> res, TreeNode root, int height) {\n    if (root == null) return;\n    if (height == res.size()) {\n        res.add(new LinkedList<Integer>());\n    }\n    res.get(height).add(root.val);\n    levelHelper(res, root.left, height + 1);\n    levelHelper(res, root.right, height + 1);\n    }\n}\n")),(0,a.mdx)("h3",{id:"implementation-using-bfs"},"Implementation using BFS"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public class Solution {\n\n    public List<List<Integer>> levelOrder(TreeNode root) {\n    Queue<TreeNode> queue = new LinkedList<TreeNode>();\n    List<List<Integer>> wrapList = new LinkedList<List<Integer>>();\n\n    if (root == null) return wrapList;\n\n    queue.offer(root);\n    while (!queue.isEmpty()) {\n        int levelNum = queue.size();\n        List<Integer> subList = new LinkedList<Integer>();\n        for (int i = 0; i < levelNum; i++) {\n        if (queue.peek().left != null) queue.offer(queue.peek().left);\n        if (queue.peek().right != null) queue.offer(queue.peek().right);\n        subList.add(queue.poll().val);\n        }\n        wrapList.add(subList);\n    }\n    return wrapList;\n    }\n}\n")),(0,a.mdx)("h2",{id:"height-maximum-depth-of-a-tree"},"Height (Maximum Depth) of a Tree"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public static int height(Node root) {\n    // base case: empty tree has a height of 0\n    if (root == null) {\n        return 0;\n        }\n\n    // recur for the left and right subtree and consider maximum depth\n    return 1 + Math.max(height(root.left), height(root.right));\n    }\n}\n\n// Time Complexity: O(N)\n// Auxiliary Space: O(1)\n")),(0,a.mdx)("h2",{id:"minimum-depth-of-a-tree"},"Minimum Depth of a Tree"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public static int minDepth(Node root) {\n        if (root == null)    return 0;\n        if (root.left == null)    return minDepth(root.right) + 1;\n        if (root.right == null) return minDepth(root.left) + 1;\n        return 1 + Math.min(minDepth(root.left),minDepth(root.right));\n    }\n}\n\n// Time Complexity: O(N)\n// Auxiliary Space: O(1)\n")),(0,a.mdx)("h2",{id:"deepest-leaves"},"Deepest Leaves"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    private int maxLevel = 0;\n\n    public void deepestLeaves(TreeNode root) {\n    if (root == null) return 0;\n    helper(root, 0);\n    }\n\n    private void helper(TreeNode root, int level) {\n    if (root == null) return;\n    if (level > maxLevel) {\n        maxLevel = level;\n    }\n    if (level == maxLevel) {\n        // root.val is the deepest level's nodes.\n    }\n    helper(root.left, level + 1);\n    helper(root.right, level + 1);\n    }\n}\n// Output 7 and 8.\n\n// Time Complexity: O(N)\n// Auxiliary Space: O(1)\n")),(0,a.mdx)("h2",{id:"binary-tree-paths"},"Binary Tree Paths"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public void printPathsRecur(Node node, int path[], int pathLen) {\n    if (node == null) return;\n\n    /* append this node to the path array */\n    path[pathLen] = node.data;\n    pathLen++;\n\n    /* it's a leaf, so print the path that lead to here  */\n    if (node.left == null && node.right == null) {\n        printArray(path, pathLen);\n    } else {\n        /* otherwise try both subtrees */\n        printPathsRecur(node.left, path, pathLen);\n        printPathsRecur(node.right, path, pathLen);\n    }\n}\n")),(0,a.mdx)("h2",{id:"binary-search-tree-paths"},"Binary Search Tree Paths"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public List<String> binaryTreePaths(TreeNode root) {\n    List<String> answer = new ArrayList<String>();\n    if (root != null) searchBT(root, "", answer);\n    return answer;\n}\nprivate void searchBT(TreeNode root, String path, List<String> answer) {\n    if (root.left == null && root.right == null) answer.add(path + root.val);\n    if (root.left != null) searchBT(root.left, path + root.val + "->", answer);\n    if (root.right != null) searchBT(root.right, path + root.val + "->", answer);\n}\n')),(0,a.mdx)("h2",{id:"resources"},"Resources"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("a",{parentName:"li",href:"https://leetcode.com/problems/binary-tree-paths/"},"LeetCode"))))}m.isMDXComponent=!0},7373:()=>{}}]);