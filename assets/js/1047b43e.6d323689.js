"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[8626],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var r=a.createContext({}),c=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),h=s,m=u["".concat(r,".").concat(h)]||u[h]||p[h]||i;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l.mdxType="string"==typeof e?e:s,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8365:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const i={tree_title:"Top 100 Liked on Leetcode \ud83d\udea7",description:"This will cover up the problems/questions which are 100 top liked on Leetcode.",last_modified:new Date("2022-06-23T12:21:37.213Z")},o="Top 100 Liked on Leetcode \ud83d\udea7",l={unversionedId:"questions/top100-liked-leetcode",id:"questions/top100-liked-leetcode",title:"Top 100 Liked on Leetcode \ud83d\udea7",description:"This will cover up the problems/questions which are 100 top liked on Leetcode.",source:"@site/docs/questions/top100-liked-leetcode.md",sourceDirName:"questions",slug:"/questions/top100-liked-leetcode",permalink:"/interview/docs/questions/top100-liked-leetcode",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Top 100 Liked on Leetcode \ud83d\udea7",description:"This will cover up the problems/questions which are 100 top liked on Leetcode.",last_modified:"2022-06-23T12:21:37.213Z"},sidebar:"docs",previous:{title:"Leetcode 75 \ud83d\udea7",permalink:"/interview/docs/questions/studyplan-leetcode75"},next:{title:"System Design",permalink:"/interview/docs/system-design/"}},r={},c=[{value:"Top coding questions from Top 100 Liked on Leetcode",id:"top-coding-questions-from-top-100-liked-on-leetcode",level:2},{value:"Two Sum",id:"two-sum",level:3},{value:"Add Two Numbers",id:"add-two-numbers",level:3},{value:"3Sum",id:"3sum",level:3},{value:"Letter Combinations of a Phone Number",id:"letter-combinations-of-a-phone-number",level:3},{value:"Remove Nth Node From End of List",id:"remove-nth-node-from-end-of-list",level:3},{value:"Valid Parentheses",id:"valid-parentheses",level:3},{value:"Merge Two Sorted Lists",id:"merge-two-sorted-lists",level:3},{value:"Merge k Sorted Lists",id:"merge-k-sorted-lists",level:3},{value:"Search in Rotated Sorted Array",id:"search-in-rotated-sorted-array",level:3},{value:"Find First and Last Position of Element in Sorted Array",id:"find-first-and-last-position-of-element-in-sorted-array",level:3},{value:"Search Insert Position",id:"search-insert-position",level:3},{value:"Combination Sum",id:"combination-sum",level:3},{value:"Permutations",id:"permutations",level:3},{value:"Longest Substring Without Repeating Characters",id:"longest-substring-without-repeating-characters",level:3},{value:"Median of two Sorted Arrays",id:"median-of-two-sorted-arrays",level:3},{value:"Longest Palindromic Substring",id:"longest-palindromic-substring",level:3},{value:"Container With Most Water",id:"container-with-most-water",level:3},{value:"Rotate Image",id:"rotate-image",level:3},{value:"Jump Game II",id:"jump-game-ii",level:3},{value:"Longest Valid Parentheses",id:"longest-valid-parentheses",level:3},{value:"References",id:"references",level:2}],d={toc:c};function p(e){let{components:t,...i}=e;return(0,s.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"top-100-liked-on-leetcode-"},"Top 100 Liked on Leetcode \ud83d\udea7"),(0,s.kt)("h2",{id:"top-coding-questions-from-top-100-liked-on-leetcode"},"Top coding questions from Top 100 Liked on Leetcode"),(0,s.kt)("p",null,"The list contains all the top 100 liked problems on leetcode, but the explanation is not available for all of them, just the ones which do not popup into head just by looking into them or which might be useful for you."),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"two-sum"},"Two Sum"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public int[] twoSum(int[] nums, int target);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Array"),(0,s.kt)("span",{class:"tag-is-success"},"Hash Table")),(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"add-two-numbers"},"Add Two Numbers"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public Node addTwoNumbers(Node l1, Node l2);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Linked List"),(0,s.kt)("span",{class:"tag-is-success"},"Math"),(0,s.kt)("span",{class:"tag-is-success"},"Recursion"))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"3sum"},"3Sum"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> threeSum(int[] nums);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Array"),(0,s.kt)("span",{class:"tag-is-success"},"Set")),(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"letter-combinations-of-a-phone-number"},"Letter Combinations of a Phone Number"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public List<String> letterCombinationsBackTrack(String digits);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Queue"),(0,s.kt)("span",{class:"tag-is-success"},"HashMap"))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"remove-nth-node-from-end-of-list"},"Remove Nth Node From End of List"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode removeNthFromEnd(ListNode head, int n);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Linked List"),(0,s.kt)("span",{class:"tag-is-primary"},"Reverse Linked List")),(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"valid-parentheses"},"Valid Parentheses"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public boolean isValid(String s);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Stack"))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"merge-two-sorted-lists"},"Merge Two Sorted Lists"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode mergeTwoLists(ListNode l1, ListNode l2);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Linked List")),(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"merge-k-sorted-lists"},"Merge k Sorted Lists"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode mergeKLists(ListNode[] lists);\n")),(0,s.kt)("span",{class:"tag-is-success"},"PriorityQueue"))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"search-in-rotated-sorted-array"},"Search in Rotated Sorted Array"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public int search(int[] nums, int target);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Binary Search Variation")),(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"find-first-and-last-position-of-element-in-sorted-array"},"Find First and Last Position of Element in Sorted Array"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public int[] searchRange(int[] nums, int target);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Binary Search Variation"))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"search-insert-position"},"Search Insert Position"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public int searchInsert(int[] nums, int target);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Binary Search Variation")),(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"combination-sum"},"Combination Sum"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> combinationSum(int[] a, int t);\n")),(0,s.kt)("span",{class:"tag-is-success"},"DFS"))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"permutations"},"Permutations"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public List<List<Integer>> permute(int[] nums);\n")),(0,s.kt)("span",{class:"tag-is-success"},"DFS"),(0,s.kt)("span",{class:"tag-is-success"},"SWAP"))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"longest-substring-without-repeating-characters"},"Longest Substring Without Repeating Characters"),(0,s.kt)("p",null,"Given a string s, find the length of the longest substring without repeating characters."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},'public int lengthOfLongestSubstring(String s);\n\nInput: s = "abcabcbb"\nOutput: 3 ("abc")\n')),(0,s.kt)("span",{class:"tag-is-success"},"Hash Table"),(0,s.kt)("span",{class:"tag-is-success"},"String"),(0,s.kt)("span",{class:"tag-is-success"},"Sliding Window")),(0,s.kt)("div",{class:"top100-liked-leetcode-item"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"The idea behind solving the problem is very simple, we need to keep track of the characters we have seen so far and the length of the substring.\n\nThe same can be achieved with usage of Set and a pointer to keep track of the start of the substring, and along with that we can use sliding window method to check the current length of the longest substring.\n")))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"median-of-two-sorted-arrays"},"Median of two Sorted Arrays"),(0,s.kt)("p",null,"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\nThe overall run time complexity should be O(log (m+n))."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"public double findMedianSortedArrays(int[] nums1, int[] nums2);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Array"),(0,s.kt)("span",{class:"tag-is-success"},"Binary Search"),(0,s.kt)("span",{class:"tag-is-success"},"Divide and Conquer")),(0,s.kt)("div",{class:"top100-liked-leetcode-item"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"Main idea behind finding the median for a 1D array is that you keep on removing the min and the max element from the array until you are either left with 1 or two elements in the array. You can apply the same concept here with using four pointers to keep track of the start end for both the sorted array.\n")))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"longest-palindromic-substring"},"Longest Palindromic Substring"),(0,s.kt)("p",null,"Given a string s, return the longest palindromic substring in s."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public String longestPalindrome(String s);\n")),(0,s.kt)("span",{class:"tag-is-success"},"String"),(0,s.kt)("span",{class:"tag-is-success"},"Dynamic Programming"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Longest Palindromic Substring BorderRadius8 MarginTop10",src:n(6437).Z,width:"418",height:"269"}))),(0,s.kt)("div",{class:"top100-liked-leetcode-item"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"The DP approach to this question is quite simple actually! For any given substring, we can confirm if it is a palindrome in O(1) time if:\n\nThe characters at the ends of the substring are the same.\nIf the inner substring is a palindrome.\nWhich will be represented by dp[i][j] = dp[i+1][j-1] && s.charAt(i) == s.charAt(j). So the dp matrix you can imagine will look like all the true value in the diagonal center as it denotes the palindrome of a single character and all the down cells to this diagonal will be false because they represent the particular length in reverse order which we don't want.\n\nLike wise we will be calculating the values for the top of diagonal section of the matrix. And there for every cell we would need the left-down diagonal value to be calculated first which is represented by dp[i+1][j-1].\n")))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"container-with-most-water"},"Container With Most Water"),(0,s.kt)("p",null,"You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height","[i]",")."),(0,s.kt)("p",null,"Find two lines that together with the x-axis form a container, such that the container contains the most water."),(0,s.kt)("p",null,"Return the maximum amount of water a container can store."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public ListNode addTwoNumbers(ListNode l1, ListNode l2);\nInput: height = [1,8,6,2,5,4,8,3,7] Output: 49\n")),(0,s.kt)("span",{class:"tag-is-success"},"Array"),(0,s.kt)("span",{class:"tag-is-success"},"Two Pointers"),(0,s.kt)("span",{class:"tag-is-success"},"Greedy")),(0,s.kt)("div",{class:"top100-liked-leetcode-item"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"The idea is to maximize the distance between the two bars and for that we can take two pointers start and end. We will calculate the area by taking the minimum of the two heights and multiply it with the difference between the two pointers. \n\nAnd for moving the pointers we will check wether the value at the start is less or higher that the value at the end index.\n")))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"rotate-image"},"Rotate Image"),(0,s.kt)("p",null,"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise)."),(0,s.kt)("p",null,"You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public void rotate(int[][] matrix);\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\n")),(0,s.kt)("span",{class:"tag-is-success"},"Array"),(0,s.kt)("span",{class:"tag-is-success"},"Math"),(0,s.kt)("span",{class:"tag-is-success"},"Matrix")),(0,s.kt)("div",{class:"top100-liked-leetcode-item"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"If you know some about Math, then we know that the Rotation is actually a process which is combination of Transpose and Reverse the Matrix. So Transposing means we swap the value diagonally and Reverse the matrix means we reverse the rows assuming each row as 1D Matrix.\n")))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"jump-game-ii"},"Jump Game II"),(0,s.kt)("p",null,"Given an array of non-negative integers nums, you are initially positioned at the first index of the array.Each element in the array represents your maximum jump length at that position.Your goal is to reach the last index in the minimum number of jumps."),(0,s.kt)("p",null,"You can assume that you can always reach the last index."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"public int jump(int[] A);\n")),(0,s.kt)("span",{class:"tag-is-success"},"Dynamic Programming"),(0,s.kt)("span",{class:"tag-is-success"},"Array"),(0,s.kt)("span",{class:"tag-is-success"},"Greedy"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Solution BorderRadius8 MarginTop10",src:n(6381).Z,width:"375",height:"480"}))),(0,s.kt)("div",{class:"top100-liked-leetcode-item"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"One quick solution for the problem is that stand at the end position and check if you can reach the current position from left, meaning Find the leftmost position that can reach the current position.\n\npublic int jump(int[] nums) {\n    int position = nums.length - 1;\n    int steps = 0;\n    while (position != 0) {\n        for (int i = 0; i < position; i++) {\n            if (nums[i] >= position - i) {\n                position = i;\n                steps++;\n                break;\n            }\n        }\n    }\n    return steps;\n}\nTC: O(n) But for the worst case we can have a O(n^2).\nTo avoid that we can add an extra check at the start like below.\n\nif len(set(nums)) < 2:\n    return math.ceil((len(nums)-1)/(nums[0])) if nums and nums[0] else 0\n\nSC: O(1) but will take O(n) if we are checking for the second part.\n")))),(0,s.kt)("hr",null),(0,s.kt)("div",{class:"top100-liked-leetcode-container"},(0,s.kt)("div",{class:"top100-liked-leetcode-item pl0"},(0,s.kt)("h3",{id:"longest-valid-parentheses"},"Longest Valid Parentheses"),(0,s.kt)("p",null,"Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'public int longestValidParentheses(String s);\nInput: s = "(()" Output: 2\n')),(0,s.kt)("span",{class:"tag-is-success"},"Dynamic Programming"),(0,s.kt)("span",{class:"tag-is-success"},"String"),(0,s.kt)("span",{class:"tag-is-success"},"Stack")),(0,s.kt)("div",{class:"top100-liked-leetcode-item"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"The idea is to traverse the string from left to right and keep track of the number of opening and closing parentheses. If open==close then we know that this is the valid sequence and if they are not equal then we reinitialize the count of both open and close to 0. Likewise repeat the process by iterating the string from right to left.\n\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Solution - Twice Iteration"),(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public int longestValidParentheses(String s) {\n        int max=0;\n        int open = 0, close=0;\n        for(int i=0;i<s.length();i++){\n            if(s.charAt(i) == '(') open++;\n            else close++;\n            if(open == close){\n                max = Math.max(max, open*2);\n            }else if(close>open){\n                open = close = 0;\n            }\n        }\n        \n        open = close=0;\n        for(int i=s.length()-1;i>=0;i--){\n            if(s.charAt(i) == '(') open++;\n            else close++;\n            if(open == close){\n                max = Math.max(max, open*2);\n            }else if(close<open){\n                open = close = 0;\n            }\n        }\n        return max;\n    }\n}\nTC: O(n)\nSC: O(1)\n")))),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"Using stack also we can solve the problem. We keep track of checking whether the string scanned so far is a valid one and also the length of the longest valid string. In order to do so, we start by pushing -1 onto the stack. For every '(' encountered, we push its index onto the stack.\nFor every ')' encountered, we pop the topmost element. Then, the length of the currently encountered valid string of parentheses will be the difference between the current element's index and the top element of the stack.\n\n")),(0,s.kt)("details",null,(0,s.kt)("summary",null,"Solution - Stack"),(0,s.kt)("div",null,(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java",metastring:"showLineNumbers",showLineNumbers:!0},"class Solution {\n    public int longestValidParentheses(String s) {\n        int max=0;\n        int open = 0, close=0;\n        for(int i=0;i<s.length();i++){\n            if(s.charAt(i) == '(') open++;\n            else close++;\n            if(open == close){\n                max = Math.max(max, open*2);\n            }else if(close>open){\n                open = close = 0;\n            }\n        }\n        \n        open = close=0;\n        for(int i=s.length()-1;i>=0;i--){\n            if(s.charAt(i) == '(') open++;\n            else close++;\n            if(open == close){\n                max = Math.max(max, open*2);\n            }else if(close<open){\n                open = close = 0;\n            }\n        }\n        return max;\n    }\n}\nTC: O(n)\nSC: O(n) As we are using Stack for the storage.\n")))))),(0,s.kt)("h2",{id:"references"},"References"),(0,s.kt)("ul",null,(0,s.kt)("li",null,(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://leetcode.com/problem-list/top-100-liked-questions/"},"https://leetcode.com/problem-list/top-100-liked-questions/")))))}p.isMDXComponent=!0},6437:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2022-06-23-15-41-47-9392adf673c3c24200484838143a9ed6.png"},6381:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/2022-06-23-18-51-59-4ba24ac17896cbf70e3f9643d439be83.png"}}]);