"use strict";(self.webpackChunkinterview=self.webpackChunkinterview||[]).push([[6072],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,g=m["".concat(s,".").concat(u)]||m[u]||h[u]||a;return n?r.createElement(g,l(l({ref:t},d),{},{components:n})):r.createElement(g,l({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9506:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const a={tree_title:"Search Algorithms",description:"This will cover the most of the topics that will be part of the Search Algorithms.",last_modified:new Date("2022-06-08T16:53:14.531Z")},l="Search Algorithms",o={unversionedId:"data-structures/search-algorithms",id:"data-structures/search-algorithms",title:"Search Algorithms",description:"This will cover the most of the topics that will be part of the Search Algorithms.",source:"@site/docs/data-structures/search-algorithms.md",sourceDirName:"data-structures",slug:"/data-structures/search-algorithms",permalink:"/interview/docs/data-structures/search-algorithms",draft:!1,tags:[],version:"current",frontMatter:{tree_title:"Search Algorithms",description:"This will cover the most of the topics that will be part of the Search Algorithms.",last_modified:"2022-06-08T16:53:14.531Z"},sidebar:"docs",previous:{title:"Priority Queue",permalink:"/interview/docs/data-structures/priority-queue"},next:{title:"Set",permalink:"/interview/docs/data-structures/set"}},s={},c=[{value:"Binary Search",id:"binary-search",level:2},{value:"Contains (True or False)",id:"contains-true-or-false",level:3},{value:"Index of target element in Sorted Rotated Array",id:"index-of-target-element-in-sorted-rotated-array",level:3},{value:"Index of first occurrence of a key",id:"index-of-first-occurrence-of-a-key",level:3},{value:"Index of last occurrence of a key",id:"index-of-last-occurrence-of-a-key",level:3},{value:"Index of greatest element less than key",id:"index-of-greatest-element-less-than-key",level:3},{value:"Index of least element greater than key",id:"index-of-least-element-greater-than-key",level:3}],d={toc:c};function h(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"search-algorithms"},"Search Algorithms"),(0,i.kt)("h2",{id:"binary-search"},"Binary Search"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Binary Search")," is a ",(0,i.kt)("strong",{parentName:"p"},"searching algorithm")," used in a ",(0,i.kt)("strong",{parentName:"p"},"sorted array")," by repeatedly dividing the search interval in half.\nThe idea of binary search is to use the information that the array is sorted and reduce the time complexity to ",(0,i.kt)("inlineCode",{parentName:"p"},"O(log n)"),"."),(0,i.kt)("div",{class:"section-container pl0 pr0"},(0,i.kt)("div",{class:"section-item pl0"},(0,i.kt)("h3",{id:"contains-true-or-false"},"Contains (True or False)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int contains(int low, int high, int target) {\n    int ans = 0;\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n        int midVal = a[mid];\n\n        if (midVal < target) {\n        low = mid + 1;\n        } else if (midVal > target) {\n        high = mid - 1;\n        } else if (midVal == target) {\n        ans = 1;\n        break;\n        }\n    }\n    return ans;\n}\n\n// Input : 2 3 3 5 5 5 6 6\n// Function : Contains(4)\n// Returns : False\n\n// Function : Contains(5)\n// Returns : True\n"))),(0,i.kt)("div",{class:"section-item pl0"},(0,i.kt)("h3",{id:"index-of-target-element-in-sorted-rotated-array"},"Index of target element in Sorted Rotated Array"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int search(int[] A, int target) {\n    int low = 0;\n    int high = A.length - 1;\n    while (low < high) {\n        int mid = low + (high - low) / 2;\n        if (A[mid] == target) return mid;\n\n        if (A[low] <= A[mid]) {\n        if (target >= A[low] && target < A[mid]) {\n            high = mid - 1;\n        } else {\n            low = mid + 1;\n        }\n        } else {\n        if (target > A[mid] && target <= A[high]) {\n            low = mid + 1;\n        } else {\n            high = mid - 1;\n        }\n        }\n    }\n    return A[low] == target ? low : -1;\n}\n\n// Input : A = [4,5,6,7,0,1,2], target = 0\n// Returns : -1\n")))),(0,i.kt)("div",{class:"section-container pl0 pr0"},(0,i.kt)("div",{class:"section-item pl0"},(0,i.kt)("h3",{id:"index-of-first-occurrence-of-a-key"},"Index of first occurrence of a key"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int first(int low, int high, int target) {\n    int ans = -1;\n    while (low <= high) {\n        int mid = low + (high - low + 1) / 2;\n        int midVal = a[mid];\n\n        if (midVal < target) {\n        low = mid + 1;\n        } else if (midVal > target) {\n        high = mid - 1;\n        } else if (midVal == target) {\n        ans = mid;\n        high = mid - 1;\n        }\n    }\n    return ans;\n}\n\n// Input : 2 3 3 5 5 5 6 6\n// Function : first(3)\n// Returns : 1\n\n// Function : first(5)\n// Returns : 3\n\n// Function : first(4)\n// Returns : -1\n"))),(0,i.kt)("div",{class:"section-item"},(0,i.kt)("h3",{id:"index-of-last-occurrence-of-a-key"},"Index of last occurrence of a key"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int last(int low, int high, int target) {\n    int ans = -1;\n    while (low <= high) {\n        int mid = low + (high - low + 1) / 2;\n        int midVal = a[mid];\n\n        if (midVal < target) {\n        low = mid + 1;\n        } else if (midVal > target) {\n        high = mid - 1;\n        } else if (midVal == target) {\n        ans = mid;\n        low = mid + 1;\n        }\n    }\n    return ans;\n}\n\n// Input : 2 3 3 5 5 5 6 6\n// Function : last(3)\n// Returns : 2\n\n// Function : last(5)\n// Returns : 5\n\n// Function : last(4)\n// Returns : -1\n")))),(0,i.kt)("div",{class:"section-container pl0 pr0"},(0,i.kt)("div",{class:"section-item"},(0,i.kt)("h3",{id:"index-of-greatest-element-less-than-key"},"Index of greatest element less than key"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int leastgreater(int low, int high, int target) {\n    int ans = -1;\n\n    while (low <= high) {\n        int mid = low + (high - low + 1) / 2;\n        int midVal = a[mid];\n\n        if (midVal < target) {\n        low = mid + 1;\n        } else if (midVal > target) {\n        ans = mid;\n        high = mid - 1;\n        } else if (midVal == target) {\n        low = mid + 1;\n        }\n    }\n    return ans;\n}\n\n// Input : 2 3 3 5 5 5 6 6\n// Function : leastGreater(2)\n// Returns : 1\n\n// Function : leastGreater(5)\n// Returns : 6\n\n"))),(0,i.kt)("div",{class:"section-item"},(0,i.kt)("h3",{id:"index-of-least-element-greater-than-key"},"Index of least element greater than key"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"int greatestlesser(int low, int high, int target) {\n    int ans = -1;\n\n    while (low <= high) {\n        int mid = low + (high - low + 1) / 2;\n        int midVal = a[mid];\n\n        if (midVal < target) {\n        ans = mid;\n        low = mid + 1;\n        } else if (midVal > target) {\n        high = mid - 1;\n        } else if (midVal == target) {\n        high = mid - 1;\n        }\n    }\n\n    return ans;\n}\n\n// Input : 2 3 3 5 5 5 6 6\n// Function : greatestLesser(2)\n// Returns : -1\n\n// Function : greatestLesser(5)\n// Returns : 2\n")))))}h.isMDXComponent=!0}}]);